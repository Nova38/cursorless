"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[48757],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return p}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),p=o,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||a;return n?r.createElement(f,i(i({ref:t},d),{},{components:n})):r.createElement(f,i({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},30552:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var r=n(87462),o=n(63366),a=(n(67294),n(3905)),i=["components"],s={},l="Test case recorder",c={unversionedId:"contributing/test-case-recorder",id:"contributing/test-case-recorder",title:"Test case recorder",description:"We use an automated test case recorder to generate test cases. To use it, you",source:"@site/../docs/contributing/test-case-recorder.md",sourceDirName:"contributing",slug:"/contributing/test-case-recorder",permalink:"/docs/contributing/test-case-recorder",editUrl:"https://github.com/cursorless-dev/cursorless/edit/main/docs/../docs/contributing/test-case-recorder.md",tags:[],version:"current",frontMatter:{},sidebar:"contributing",previous:{title:"Parse tree pattern matcher",permalink:"/docs/contributing/parse-tree-patterns"}},d={},u=[{value:"Initial setup",id:"initial-setup",level:2},{value:"Recording new tests",id:"recording-new-tests",level:2},{value:"Navigation map tests",id:"navigation-map-tests",level:3},{value:"Run recorded tests",id:"run-recorded-tests",level:2},{value:"Changing recorded test cases in bulk",id:"changing-recorded-test-cases-in-bulk",level:2},{value:"Autoformatting",id:"autoformatting",level:3},{value:"Upgrading fixtures",id:"upgrading-fixtures",level:3},{value:"Custom transformation",id:"custom-transformation",level:3}],m={toc:u};function p(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"test-case-recorder"},"Test case recorder"),(0,a.kt)("p",null,"We use an automated test case recorder to generate test cases. To use it, you\nset up a file the way you'd like (usually a minimal file containing something\nlike ",(0,a.kt)("inlineCode",{parentName:"p"},"hello world"),"), positioning your cursor where you want, tell cursorless to\nstart recording, and then issue one or more cursorless commands. It works by\nrecording the initial state of the file including cursor position(s), the\ncommand run, and the final state, all in the form of a yaml document. See\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/tree/main/src/test/suite/fixtures/recorded"},"existing test cases")," for example outputs."),(0,a.kt)("h2",{id:"initial-setup"},"Initial setup"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Add a voice command for recording to your personal talon files:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'cursorless record: user.vscode("cursorless.recordTestCase")')),(0,a.kt)("li",{parentName:"ul"},"We don't want to commit this so add it to your own repository."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If you'd like to be able to record tests which check the navigation map, please add the following to your personal talon files:"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/pokey/pokey_talon/blob/9298c25dd6d28fd9fcf5ed39f305bc6b93e5f229/apps/vscode/vscode.talon#L468"},"https://github.com/pokey/pokey_talon/blob/9298c25dd6d28fd9fcf5ed39f305bc6b93e5f229/apps/vscode/vscode.talon#L468")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/pokey/pokey_talon/blob/49643bfa8f62cbec18b5ddad1658f5a28785eb01/apps/vscode/vscode.py#L203-L205"},"https://github.com/pokey/pokey_talon/blob/49643bfa8f62cbec18b5ddad1658f5a28785eb01/apps/vscode/vscode.py#L203-L205"))),(0,a.kt)("p",{parentName:"li"},"It is quite unlikely you'll need this second step. Most tests don't check the navigation map.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"If you'd like to be able to record tests which assert on non-matches, please add another command to your personal talon files. See the two files links above for context. Add the command below to your to your ",(0,a.kt)("inlineCode",{parentName:"p"},"vscode.py")," and ensure that there is a matching Talon command."))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'  actions.user.vscode_with_plugin("cursorless.recordTestCase", {"recordErrors": True})\n')),(0,a.kt)("h2",{id:"recording-new-tests"},"Recording new tests"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Start debugging (F5)"),(0,a.kt)("li",{parentName:"ol"},"Create a minimal file to use for recording tests. And position your cursor\nwhere you'd like. Check out the ",(0,a.kt)("inlineCode",{parentName:"li"},"initialState.documentContents")," field of\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/cursorless-dev/cursorless/tree/main/src/test/suite/fixtures/recorded"},"existing test cases")," for examples."),(0,a.kt)("li",{parentName:"ol"},"Issue the ",(0,a.kt)("inlineCode",{parentName:"li"},'"cursorless record"')," command",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"List of target directories is shown. All test cases will be put into the\ngiven subdirectory of ",(0,a.kt)("inlineCode",{parentName:"li"},"src/test/suite/fixtures/recorded")))),(0,a.kt)("li",{parentName:"ol"},"Select existing directory or create new one",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Select ",(0,a.kt)("inlineCode",{parentName:"li"},"Create new folder")),(0,a.kt)("li",{parentName:"ul"},"If the new directory name contains any ",(0,a.kt)("inlineCode",{parentName:"li"},"/"),", it will create nested\nsubdirectories."))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Recording test cases for following commands")," is shown"),(0,a.kt)("li",{parentName:"ol"},"Issue any cursorless voice command",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"take air"')))),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"Cursorless test case saved")," is shown",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"File created on disk using spoken words as file name"))),(0,a.kt)("li",{parentName:"ol"},"Repeat as many cursorless voice commands as you want recorded. Each command\nyou\nissue will generate a test case in the form of a yaml file."),(0,a.kt)("li",{parentName:"ol"},"Issue ",(0,a.kt)("inlineCode",{parentName:"li"},'"cursorless record"')," command again to stop recording",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Stopped recording test cases")," is shown"),(0,a.kt)("li",{parentName:"ul"},"You can also just stop the debugger or close the debug window")))),(0,a.kt)("h3",{id:"navigation-map-tests"},"Navigation map tests"),(0,a.kt)("p",null,'If you want to check how the navigation map gets updated in response to changes, you can instead say "cursorless record navigation", and then you need to issue two commands in one phrase each time. The second command should be of the form "take air" (or another decorated mark), and will tell the test case recorder which decorated mark we\'re checking.'),(0,a.kt)("h2",{id:"run-recorded-tests"},"Run recorded tests"),(0,a.kt)("p",null,"Recorded tests will automatically be picked up and run with the normal tests,\nand can be run in vscode or via yarn in terminal."),(0,a.kt)("h2",{id:"changing-recorded-test-cases-in-bulk"},"Changing recorded test cases in bulk"),(0,a.kt)("h3",{id:"autoformatting"},"Autoformatting"),(0,a.kt)("p",null,"To clean up the formatting of all of the yaml test cases, run ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn run compile && node ./out/scripts/transformRecordedTests/index.js")),(0,a.kt)("h3",{id:"upgrading-fixtures"},"Upgrading fixtures"),(0,a.kt)("p",null,"To upgrade all the test fixtures to the latest command version, run the command ",(0,a.kt)("inlineCode",{parentName:"p"},"yarn run compile && node ./out/scripts/transformRecordedTests/index.js upgrade"),". This command should be idempotent."),(0,a.kt)("h3",{id:"custom-transformation"},"Custom transformation"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Add a new transformation to the ",(0,a.kt)("inlineCode",{parentName:"li"},"src/scripts/transformRecordedTests/transformations")," directory. Look at the existing transformations in that directory for inspiration."),(0,a.kt)("li",{parentName:"ol"},"Change the value at the ",(0,a.kt)("inlineCode",{parentName:"li"},"custom")," key in ",(0,a.kt)("inlineCode",{parentName:"li"},"AVAILABLE_TRANSFORMATIONS")," at the top of\n",(0,a.kt)("a",{parentName:"li",href:"https://github.com/cursorless-dev/cursorless/tree/main/src/scripts/transformRecordedTests/index.ts"},(0,a.kt)("inlineCode",{parentName:"a"},"transformRecordedTests/index.ts"))," to\npoint to your new transformation"),(0,a.kt)("li",{parentName:"ol"},"Run ",(0,a.kt)("inlineCode",{parentName:"li"},"yarn run compile && node ./out/scripts/transformRecordedTests/index.js custom"))),(0,a.kt)("p",null,"Example of a custom transformation"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-typescript"},'export function updateSurroundingPairTest(fixture: TestCaseFixture) {\n  fixture.command.targets = transformPartialPrimitiveTargets(\n    fixture.command.targets,\n    (target: PartialPrimitiveTargetDesc) => {\n      target.modifiers?.forEach((modifier) => {\n        if (modifier?.type === "surroundingPair") {\n          let delimiterInclusion: DelimiterInclusion;\n          switch (modifier.delimiterInclusion as any) {\n            case "includeDelimiters":\n              delimiterInclusion = undefined;\n              break;\n            case "excludeDelimiters":\n              delimiterInclusion = "interiorOnly";\n              break;\n            case "delimitersOnly":\n              delimiterInclusion = "excludeInterior";\n              break;\n          }\n          modifier.delimiterInclusion = delimiterInclusion;\n        }\n      });\n')))}p.isMDXComponent=!0}}]);