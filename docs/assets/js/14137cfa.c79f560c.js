"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[51842],{3905:function(t,e,n){n.d(e,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,r,a=function(t,e){if(null==t)return{};var n,r,a={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(a[n]=t[n]);return a}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(a[n]=t[n])}return a}var p=r.createContext({}),s=function(t){var e=r.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},u=function(t){var e=s(t.components);return r.createElement(p.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},d=r.forwardRef((function(t,e){var n=t.components,a=t.mdxType,i=t.originalType,p=t.parentName,u=l(t,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||c[m]||i;return n?r.createElement(f,o(o({ref:e},u),{},{components:n})):r.createElement(f,o({ref:e},u))}));function m(t,e){var n=arguments,a=e&&e.mdxType;if("string"==typeof t||a){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var p in e)hasOwnProperty.call(e,p)&&(l[p]=e[p]);l.originalType=t,l.mdxType="string"==typeof t?t:a,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},35211:function(t,e,n){n.r(e),n.d(e,{assets:function(){return u},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var r=n(87462),a=n(63366),i=(n(67294),n(3905)),o=["components"],l={},p="Parse tree pattern matcher",s={unversionedId:"contributing/parse-tree-patterns",id:"contributing/parse-tree-patterns",title:"Parse tree pattern matcher",description:"We have a small domain-specific language that we use to define patterns to look for in tree-sitter parse trees. This DSL enables us to rapidly define new syntactic scope types and support new programming languages.",source:"@site/../docs/contributing/parse-tree-patterns.md",sourceDirName:"contributing",slug:"/contributing/parse-tree-patterns",permalink:"/docs/contributing/parse-tree-patterns",editUrl:"https://github.com/cursorless-dev/cursorless/edit/main/docs/../docs/contributing/parse-tree-patterns.md",tags:[],version:"current",frontMatter:{},sidebar:"contributing",previous:{title:"Hat snapshots",permalink:"/docs/contributing/architecture/hat-snapshots"},next:{title:"Test case recorder",permalink:"/docs/contributing/test-case-recorder"}},u={},c=[{value:"Format",id:"format",level:2},{value:"Multiple patterns",id:"multiple-patterns",level:2}],d={toc:c};function m(t){var e=t.components,n=(0,a.Z)(t,o);return(0,i.kt)("wrapper",(0,r.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"parse-tree-pattern-matcher"},"Parse tree pattern matcher"),(0,i.kt)("p",null,"We have a small domain-specific language that we use to define patterns to look for in tree-sitter parse trees. This DSL enables us to rapidly define new syntactic scope types and support new programming languages."),(0,i.kt)("h2",{id:"format"},"Format"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GRAND_PARENT_TYPE.*.CHILD_TYPE[FIELD]!?")),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Syntax"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"TYPE"),(0,i.kt)("td",{parentName:"tr",align:null},"Match node type",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"node.type"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Dot operator(",(0,i.kt)("inlineCode",{parentName:"td"},"."),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Type hierarchy between parent and child")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Wildcard op(",(0,i.kt)("inlineCode",{parentName:"td"},"*"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Match any type")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Negation op(",(0,i.kt)("inlineCode",{parentName:"td"},"~"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Match any type other than what is specified after ",(0,i.kt)("inlineCode",{parentName:"td"},"~"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Important op(",(0,i.kt)("inlineCode",{parentName:"td"},"!"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Use this node as result instead of parent.",(0,i.kt)("br",null),"By default the leftmost/top node is used")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Optional op(",(0,i.kt)("inlineCode",{parentName:"td"},"?"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Node is optional. Will match if available.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Field op(",(0,i.kt)("inlineCode",{parentName:"td"},"[field]"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Return child node at given field.",(0,i.kt)("br",null),(0,i.kt)("inlineCode",{parentName:"td"},"node.childForFieldName(field)"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Index op(",(0,i.kt)("inlineCode",{parentName:"td"},"[n]"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"Return nth named child node.")))),(0,i.kt)("h2",{id:"multiple-patterns"},"Multiple patterns"),(0,i.kt)("p",null,"When using multiple patterns evaluation will be performed top to bottom and the first pattern too match will be used."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'["export_statement?.class_declaration", "export_statement.class"];\n')))}m.isMDXComponent=!0}}]);