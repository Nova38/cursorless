"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[65786],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),u=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),m=u(n),d=r,h=m["".concat(l,".").concat(d)]||m[d]||p[d]||s;return n?o.createElement(h,a(a({ref:t},c),{},{components:n})):o.createElement(h,a({ref:t},c))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,a=new Array(s);a[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var u=2;u<s;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},22342:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var o=n(87462),r=n(63366),s=(n(67294),n(3905)),a=["components"],i={},l="Customization",u={unversionedId:"user/customization",id:"user/customization",title:"Customization",description:"Many of the spoken forms used in cursorless can be easily customized without",source:"@site/../docs/user/customization.md",sourceDirName:"user",slug:"/user/customization",permalink:"/docs/user/customization",editUrl:"https://github.com/cursorless-dev/cursorless/edit/main/docs/../docs/user/customization.md",tags:[],version:"current",frontMatter:{},sidebar:"user",previous:{title:"Cursorless documentation",permalink:"/docs/"},next:{title:"Experimental features",permalink:"/docs/user/experimental/"}},c={},p=[{value:"Cursorless settings csvs",id:"cursorless-settings-csvs",level:2},{value:"Changing a spoken form",id:"changing-a-spoken-form",level:3},{value:"New features",id:"new-features",level:3},{value:"Removing a term",id:"removing-a-term",level:3},{value:"[Experimental] Cursorless custom VSCode actions",id:"experimental-cursorless-custom-vscode-actions",level:2},{value:"Toggling &quot;hat&quot; display",id:"toggling-hat-display",level:2},{value:"Cursorless public API",id:"cursorless-public-api",level:2},{value:"Public Talon captures",id:"public-talon-captures",level:3},{value:"Public Talon actions",id:"public-talon-actions",level:3},{value:"Example of combining capture and action",id:"example-of-combining-capture-and-action",level:3}],m={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,a);return(0,s.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"customization"},"Customization"),(0,s.kt)("p",null,"Many of the spoken forms used in cursorless can be easily customized without\nneeding to fork cursorless or modify the talon / python files contained\ntherein. If you find that your customization needs cannot be met without making\nchanges to cursorless files, please ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/cursorless-dev/cursorless/issues/new"},"file an\nissue")," so we can\nimprove customization."),(0,s.kt)("h2",{id:"cursorless-settings-csvs"},"Cursorless settings csvs"),(0,s.kt)("p",null,"The spoken forms for actions, scope types, colors, etc can be customized using the\ncsvs found in the ",(0,s.kt)("inlineCode",{parentName:"p"},"cursorless-settings")," subdirectory of your user folder. On\nLinux and Mac, the directory is ",(0,s.kt)("inlineCode",{parentName:"p"},"~/.talon/user/cursorless-settings"),". On\nWindows, it is ",(0,s.kt)("inlineCode",{parentName:"p"},"%AppData%\\Talon\\user\\cursorless-settings"),"."),(0,s.kt)("p",null,"The directory location can be customized using the ",(0,s.kt)("inlineCode",{parentName:"p"},"user.cursorless_settings_directory")," Talon setting. If the path is relative, it will be taken relative to your Talon user directory."),(0,s.kt)("p",null,"Note that these csv's:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"support empty lines,"),(0,s.kt)("li",{parentName:"ul"},"supports multiple spoken forms for a single action"),(0,s.kt)("li",{parentName:"ul"},"support comment lines beginning with ",(0,s.kt)("inlineCode",{parentName:"li"},"#"),", and"),(0,s.kt)("li",{parentName:"ul"},"ignore any leading / trailing whitespace on spoken forms and cursorless\nidentifiers")),(0,s.kt)("p",null,"If the spoken form begins with a ",(0,s.kt)("inlineCode",{parentName:"p"},"-"),", it will be disabled. Please do not remove\nthese lines, because that will trigger cursorless to add them back on next\nreload, as cursorless uses these lines to track disabled spoken forms."),(0,s.kt)("h3",{id:"changing-a-spoken-form"},"Changing a spoken form"),(0,s.kt)("p",null,"Simply modify the spoken form in the first column of any of the csvs in the\ndirectory above to change the spoken you'd like to use. The new spoken form will be usable immediately."),(0,s.kt)("p",null,"Multiple spoken forms can be used for the same action using the pipe operator\n",(0,s.kt)("inlineCode",{parentName:"p"},"remove|delete")),(0,s.kt)("h3",{id:"new-features"},"New features"),(0,s.kt)("p",null,"When new actions, scope types, etc are added, Cursorless will detect that they're missing from your csvs and append the default term to the end. You can then feel free to modify the spoken form if you'd like to change it."),(0,s.kt)("h3",{id:"removing-a-term"},"Removing a term"),(0,s.kt)("p",null,"If you'd like to remove an action, scope type, etc, you can simply set the\nspoken form in the first column to any thing starting with ",(0,s.kt)("inlineCode",{parentName:"p"},"-"),". Please don't\ndelete any lines, as that will trigger cursorless to automatically add the\nspoken form back on talon restart."),(0,s.kt)("h2",{id:"experimental-cursorless-custom-vscode-actions"},"[","Experimental","]"," Cursorless custom VSCode actions"),(0,s.kt)("p",null,"You can use Cursorless to run any built-in VSCode command on a specific target."),(0,s.kt)("p",null,"Just add your custom commands to: ",(0,s.kt)("inlineCode",{parentName:"p"},"experimental/actions_custom.csv"),". For example, if you wanted to be able to say ",(0,s.kt)("inlineCode",{parentName:"p"},'"push down <T>"')," to move the line(s) containing target ",(0,s.kt)("inlineCode",{parentName:"p"},"<T>")," downwards, you could do the following:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-csv"},"Spoken form, VSCode command\npush down, editor.action.moveLinesDownAction\n")),(0,s.kt)("p",null,'Now when you say eg "push down air and bat", cursorless will first select the two tokens with a gray hat over the ',(0,s.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"b"),", then issue the VSCode command ",(0,s.kt)("inlineCode",{parentName:"p"},"editor.action.moveLinesDownAction"),", and then restore your original selection."),(0,s.kt)("h2",{id:"toggling-hat-display"},'Toggling "hat" display'),(0,s.kt)("p",null,"It is possible to show / hide the hats with a command. Keep in mind that many users, often after less than a week using Cursorless, find that their brain starts to tune out the hat display. Some start to miss them when they're gone \ud83e\udd72"),(0,s.kt)("p",null,"However, should you like to show / hide the hats within your editor, you can use the following approach."),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"Bring up the command pallet(",(0,s.kt)("inlineCode",{parentName:"li"},"Shift + CMD + P")," on Mac; ",(0,s.kt)("inlineCode",{parentName:"li"},"Shift + Ctrl + P")," on Windows / Linux)."),(0,s.kt)("li",{parentName:"ul"},"Enter ",(0,s.kt)("inlineCode",{parentName:"li"},"cursorless.toggleDecorations")," or type ",(0,s.kt)("inlineCode",{parentName:"li"},"Cursorless Toggle")," to see the command in the dropdown.")),(0,s.kt)("p",null,"You should also be able to find the above command by saying ",(0,s.kt)("inlineCode",{parentName:"p"},'"please toggle"'),". The same command can be repeated to turn the hats back on."),(0,s.kt)("p",null,"While the hats are hidden, you will not be able to address any marks, eg ",(0,s.kt)("inlineCode",{parentName:"p"},'"take air"'),". However, Cursorless will still recognize scopes, eg ",(0,s.kt)("inlineCode",{parentName:"p"},'"take funk"'),"."),(0,s.kt)("p",null,"If you'd like to map a voice command to toggle the hats, have a look at ",(0,s.kt)("a",{parentName:"p",href:"https://youtu.be/oWUJyDgz63k"},"https://youtu.be/oWUJyDgz63k")),(0,s.kt)("h2",{id:"cursorless-public-api"},"Cursorless public API"),(0,s.kt)("p",null,"Cursorless exposes a couple talon actions and captures that you can use to define your own custom command grammar leveraging cursorless targets."),(0,s.kt)("h3",{id:"public-talon-captures"},"Public Talon captures"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"<user.cursorless_target>"),"\nRepresents a cursorless target, such as ",(0,s.kt)("inlineCode",{parentName:"li"},'"air"'),", ",(0,s.kt)("inlineCode",{parentName:"li"},'"this"'),", ",(0,s.kt)("inlineCode",{parentName:"li"},'"air past bat"'),", ",(0,s.kt)("inlineCode",{parentName:"li"},'"air and bat"'),", ",(0,s.kt)("inlineCode",{parentName:"li"},'"funk air past token bat and class cap"'),", etc")),(0,s.kt)("h3",{id:"public-talon-actions"},"Public Talon actions"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"user.cursorless_command(action_id: str, target: cursorless_target)"),"\nPerform a Cursorless command on the given target\neg: ",(0,s.kt)("inlineCode",{parentName:"li"},'user.cursorless_command("setSelection", cursorless_target)')),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"user.cursorless_vscode_command(command_id: str, target: cursorless_target)"),"\nPerforms a VSCode command on the given target\neg: ",(0,s.kt)("inlineCode",{parentName:"li"},'user.cursorless_vscode_command("editor.action.addCommentLine", cursorless_target)'))),(0,s.kt)("h3",{id:"example-of-combining-capture-and-action"},"Example of combining capture and action"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-talon"},'add dock string <user.cursorless_target>:\n    user.cursorless_command("editNewLineAfter", cursorless_target)\n    "\\"\\"\\"\\"\\"\\""\n    key(left:3)\n\npush <user.cursorless_target> down:\n    user.cursorless_vscode_command("editor.action.moveLinesDownAction", cursorless_target)\n')))}d.isMDXComponent=!0}}]);